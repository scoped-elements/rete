{"version":3,"file":"app.min.js","sources":["../node_modules/stage0/index.js","../node_modules/stage0/syntheticEvents.js","../app.js","../node_modules/stage0/reuseNodes.js"],"sourcesContent":["\nfunction collector(node) {\n  if (node.nodeType !== 3) {\n    if (node.attributes !== undefined) {\n      for(let attr of node.attributes) {\n        let aname = attr.name\n        if (aname[0] === '#') {\n          node.removeAttribute(aname)\n          return aname.slice(1)\n        }\n      }\n    }\n    return 0\n  } else {\n    let nodeData = node.nodeValue\n    if (nodeData[0] === '#') {\n      node.nodeValue = \"\"\n      return nodeData.slice(1)\n    }\n    return 0\n  }\n}\n\nfunction walker(node) {\n  let skip = false, tmp, pathId = '', prevPathId, pahtIdLen, code1, code2, ref\n  code1 = code2 = ''\n  if (ref = collector(node)) code2 += `refs.${ref} = node;\\n` \n  do {\n      if (!skip && (tmp = node.firstChild)) {\n          if (tmp.nodeType === 8) {\n              tmp.parentNode.removeChild(tmp)\n              continue\n          }\n          skip = false       \n\n          prevPathId = pathId\n          pathId += '_f'\n          code1 += `let ${pathId} = ${prevPathId || 'node'}.firstChild;\\n` \n\n          if (ref = collector(tmp)) code2 += `refs.${ref} = ${pathId};\\n` \n      } else if (tmp = node.nextSibling) {\n          if (tmp.nodeType === 8) {\n              tmp.parentNode.removeChild(tmp)\n              continue\n          }\n          skip = false\n\n          prevPathId = pathId\n          pathId += '_n'\n          code1 += `let ${pathId} = ${prevPathId || 'node'}.nextSibling;\\n` \n\n          if (ref = collector(tmp)) code2 += `refs.${ref} = ${pathId};\\n` \n      } else {\n          pahtIdLen = pathId.length\n          if (pathId[pahtIdLen - 1] === 'n') {\n              pathId = pathId.slice(0, pathId.lastIndexOf('_f_n'))\n          } else {\n             pathId = pathId.slice(0, pahtIdLen- 2) \n          }\n          tmp = node.parentNode\n          skip = true\n      }\n      node = tmp\n  } while (node)\n  return Function('node', code1 + 'let refs = {};\\n' + code2 + 'return refs;\\n')\n}\n\nconst compilerTemplate = document.createElement('template')\nexport function h(strings, ...args) {\n  let result = ''\n  for(let i = 0; i < args.length; i++) result += strings[i] + args[i]\n  result += strings[strings.length - 1]\n\n  const template = result\n    .replace(/>\\n+/g, '>')\n    .replace(/\\s+</g, '<')\n    .replace(/>\\s+/g, '>')\n    .replace(/\\n\\s+/g, '<!-- -->')\n  compilerTemplate.innerHTML = template\n  const content = compilerTemplate.content.firstChild\n  content.collect = walker(content)\n  return content\n}\nexport default h\n","const nativeToSyntheticEvent = (event, name) => {\n    const eventKey = `__${name}`\n    let dom = event.target\n    while(dom !== null) {\n        const eventHandler = dom[eventKey]\n        if (eventHandler) {\n            eventHandler()\n            return\n        }\n        dom = dom.parentNode\n    }\n}\nconst CONFIGURED_SYNTHETIC_EVENTS = {}\nexport function setupSyntheticEvent(name) {\n    if (CONFIGURED_SYNTHETIC_EVENTS[name]) return\n    document.addEventListener(name, event => nativeToSyntheticEvent(event, name))\n    CONFIGURED_SYNTHETIC_EVENTS[name] = true\n}","import h from 'stage0'\nimport {setupSyntheticEvent} from 'stage0/syntheticEvents'\nimport {reuseNodes} from 'stage0/reuseNodes'\n\nlet did = 1\nfunction buildData(count) {\n    var adjectives = [\"pretty\", \"large\", \"big\", \"small\", \"tall\", \"short\", \"long\", \"handsome\", \"plain\", \"quaint\", \"clean\", \"elegant\", \"easy\", \"angry\", \"crazy\", \"helpful\", \"mushy\", \"odd\", \"unsightly\", \"adorable\", \"important\", \"inexpensive\", \"cheap\", \"expensive\", \"fancy\"];\n    var colours = [\"red\", \"yellow\", \"blue\", \"green\", \"pink\", \"brown\", \"purple\", \"brown\", \"white\", \"black\", \"orange\"];\n    var nouns = [\"table\", \"chair\", \"house\", \"bbq\", \"desk\", \"car\", \"pony\", \"cookie\", \"sandwich\", \"burger\", \"pizza\", \"mouse\", \"keyboard\"];\n    var data = [];\n    for (var i = 0; i < count; i++) {\n        data.push({\n            id: did++,\n            label: adjectives[_random(adjectives.length)] + \" \" + colours[_random(colours.length)] + \" \" + nouns[_random(nouns.length)]\n        });\n    }\n    return data;\n}\nfunction _random(max) {\n    return Math.round(Math.random() * 1000) % max;\n}\n\nconst itemView = h`\n  <tr>\n      <td class=\"col-md-1\">#id</td>\n      <td class=\"col-md-4\">\n          <a #select>#label</a>\n      </td>\n      <td class=\"col-md-1\"><a #del><span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span></a></td>\n      <td class=\"col-md-6\"></td>\n  </tr>\n`\nfunction Item(item, scope) {\n  const root = itemView.cloneNode(true)\n  const refs = itemView.collect(root)\n\n  const {id, label, select, del} = refs\n\n  id.nodeValue = item.id\n  label.nodeValue = item.label\n  select.__click = () => scope.select(item)\n  del.__click = () => scope.del(item)\n\n  let a = '', a2, \n      b = item.label, b2\n  root.update = function(newItem, selected) {\n    if (newItem !== item) {\n      item = newItem\n      id.nodeValue = item.id\n    }\n\n    a2 = item.id === selected ? 'danger' : ''\n    b2 = item.label\n    \n    if (a2 !== a) a = root.className = a2\n    if (b2 !== b) b = label.nodeValue = b2\n  }\n\n  return root\n}\n\nconst mainView = h`\n  <div class=\"container\" id=\"main\">\n      <div class=\"jumbotron\">\n          <div class=\"row\">\n              <div class=\"col-md-6\">\n                  <h1>stage0</h1>\n              </div>\n              <div class=\"col-md-6\">\n                  <div class=\"row\">\n                      <div class=\"col-sm-6 smallpad\">\n                          <button type=\"button\" class=\"btn btn-primary btn-block\" id=\"run\" #run>Create 1,000 rows</button>\n                      </div>\n                      <div class=\"col-sm-6 smallpad\">\n                          <button type=\"button\" class=\"btn btn-primary btn-block\" id=\"runlots\" #runlots>Create 10,000 rows</button>\n                      </div>\n                      <div class=\"col-sm-6 smallpad\">\n                          <button type=\"button\" class=\"btn btn-primary\n                          btn-block\" id=\"add\" #add>Append 1,000 rows</button>\n                      </div>\n                      <div class=\"col-sm-6 smallpad\">\n                          <button type=\"button\" class=\"btn btn-primary\n                          btn-block\" id=\"update\" #update>Update every 10th row</button>\n                      </div>\n                      <div class=\"col-sm-6 smallpad\">\n                          <button type=\"button\" class=\"btn btn-primary\n                          btn-block\" id=\"clear\" #cleardata>Clear</button>\n                      </div>\n                      <div class=\"col-sm-6 smallpad\">\n                          <button type=\"button\" class=\"btn btn-primary\n                          btn-block\" id=\"swaprows\" #swaprows>Swap Rows</button>\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </div>\n      <table class=\"table table-hover table-striped test-data\">\n          <tbody #tbody>\n          </tbody>\n      </table>\n      <span class=\"preloadicon glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\n  </div>\n`\nfunction Main() {\n  setupSyntheticEvent('click')\n\n  let root = mainView\n  let refs = mainView.collect(root)\n\n  let data = [],\n      selected\n\n  const {tbody} = refs\n\n  refs.run.__click = () => {\n    data = buildData(1000)\n    update()\n  }\n  refs.runlots.__click = () => {\n    data = buildData(10000)\n    update()\n  }\n  refs.add.__click = () => {\n    data = data.concat(buildData(1000))\n    update()\n  }\n  refs.update.__click = () => {\n    for (let i = 0; i < data.length; i += 10) {\n        data[i].label += ' !!!'\n    }\n    update()\n  }\n  refs.cleardata.__click = () => {\n    data = []\n    update()\n  }\n  refs.swaprows.__click = () => {\n    if(data.length > 998) {\n      var tmp = data[1];\n      data[1] = data[998];\n      data[998] = tmp;\n    }\n    update()\n  }\n\n  const scope = {\n    select: item => {\n        selected = parseInt(item.id)\n        update()\n    },\n    del: item => {\n      const id = item.id\n      const idx = data.findIndex(d => d.id === id);\n      data.splice(idx, 1)\n      update()\n    }\n  }\n\n  let renderedData = []\n  function update() {\n    reuseNodes(\n      tbody,\n      renderedData,\n      data,\n      item => Item(item, scope),\n      (node, item) => node.update(item, selected)\n    )\n    renderedData = data.slice()\n  }\n\n  return root\n}\n\nconst app = Main()\ndocument.getElementById('main').appendChild(app)\n","\nexport function reuseNodes(parent, renderedValues, data, createFn, noOp, beforeNode, afterNode) {\n    if (data.length === 0) {\n        if (beforeNode !== undefined || afterNode !== undefined) {\n            let node = beforeNode !== undefined ? beforeNode.nextSibling : parent.firstChild,\n                tmp\n\n            if (afterNode === undefined) afterNode = null\n\n            while(node !== afterNode) {\n                tmp = node.nextSibling\n                parent.removeChild(node)\n                node = tmp\n            }\n        } else {\n            parent.textContent = \"\"    \n        }\n        return\n    }\n    if (renderedValues.length > data.length) {\n        let i = renderedValues.length,\n            tail = afterNode !== undefined ? afterNode.previousSibling : parent.lastChild,\n            tmp\n        while(i > data.length) {\n            tmp = tail.previousSibling\n            parent.removeChild(tail)\n            tail = tmp\n            i--\n        }\n    }\n\n    let _head = beforeNode ? beforeNode.nextSibling : parent.firstChild\n    if (_head === afterNode) _head = undefined\n\n    let _mode = afterNode ? 1 : 0\n    for(let i = 0, item, head = _head, mode = _mode; i < data.length; i++) {\n        item = data[i]\n        if (head) {\n            noOp(head, item)\n        } else {\n            head = createFn(item)\n            mode ? parent.insertBefore(head, afterNode) : parent.appendChild(head)\n        }\n        head = head.nextSibling\n        if (head === afterNode) head = null\n    }\n}\nexport default reuseNodes\n"],"names":["collector","node","nodeType","undefined","attributes","attr","aname","name","removeAttribute","slice","nodeData","nodeValue","compilerTemplate","document","createElement","h","strings","args","result","i","length","template","replace","innerHTML","content","firstChild","collect","tmp","prevPathId","pahtIdLen","code1","code2","ref","skip","pathId","parentNode","removeChild","nextSibling","lastIndexOf","Function","walker","nativeToSyntheticEvent","event","eventKey","dom","target","eventHandler","CONFIGURED_SYNTHETIC_EVENTS","did","buildData","count","adjectives","colours","nouns","data","push","_random","max","Math","round","random","itemView","mainView","app","addEventListener","selected","root","refs","tbody","run","__click","runlots","add","concat","update","label","cleardata","swaprows","scope","item","parseInt","id","idx","findIndex","d","splice","renderedData","parent","renderedValues","createFn","noOp","beforeNode","afterNode","textContent","tail","previousSibling","lastChild","_head","head","mode","insertBefore","appendChild","cloneNode","select","del","a2","b2","a","b","newItem","className","Item","Main","getElementById"],"mappings":"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"}